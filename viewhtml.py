import streamlit as st
import streamlit.components.v1 as components
import base64
import io
import math
import textwrap
from PIL import Image, ImageDraw, ImageFont

# ID c·ªßa DIV ch·ª©a n·ªôi dung HTML Preview
PREVIEW_ELEMENT_ID = "html-content-wrapper" 

# --- 1. H√†m JavaScript: In n·ªôi dung trong C·ª≠a s·ªï M·ªõi (Kh√¥ng thay ƒë·ªïi) ---
JS_PRINT_FUNCTION = """
<script>
    function printPreview() {
        // 1. L·∫•y n·ªôi dung HTML c·∫ßn in (ƒë√£ b·ªçc trong div c√≥ ID)
        var previewElement = document.getElementById('html-content-wrapper');
        if (!previewElement) {
            alert('L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung HTML ƒë·ªÉ in.');
            return;
        }
        
        var htmlToPrint = previewElement.innerHTML;
        
        // 2. M·ªü m·ªôt c·ª≠a s·ªï/tab m·ªõi
        var printWindow = window.open('', '', 'height=600,width=800');
        
        // L·∫•y l·∫°i c√°c th·∫ª style t·ª´ head c·ªßa trang ch√≠nh (n·∫øu c√≥)
        var fullHTML = '<html><head><title>Print</title>' + 
                       document.head.innerHTML + 
                       '</head><body>' + htmlToPrint + '</body></html>';
                       
        printWindow.document.write(fullHTML);
        
        // 3. X√≥a n√∫t b·∫•m kh·ªèi c·ª≠a s·ªï in ƒë·ªÉ n√≥ kh√¥ng xu·∫•t hi·ªán trong PDF
        var printButtonContainer = printWindow.document.getElementById('print-button-container');
        if (printButtonContainer) {
            printButtonContainer.remove();
        }
        
        // 4. K√≠ch ho·∫°t l·ªánh in
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
    }
</script>
"""

# ---------- H√ÄM X·ª¨ L√ù ·∫¢NH GH√âP (T·ª™ CODE C·ª¶A B·∫†N) ----------

def measure_text(draw, text, font):
    """ƒêo k√≠ch th∆∞·ªõc vƒÉn b·∫£n (H·ªó tr·ª£ PIL 9+ v√† c≈© h∆°n)."""
    try:
        bbox = draw.textbbox((0, 0), text, font=font)
        w = bbox[2] - bbox[0]
        h = bbox[3] - bbox[1]
        return w, h
    except Exception:
        # Fallback cho c√°c phi√™n b·∫£n PIL c≈© h∆°n
        try:
            return font.getsize(text)
        except Exception:
            return (len(text) * 6, 12)

def make_grid_with_captions(cells, cols=4, size=(300, 300), caption_height=70, bg_color=(255,255,255)):
    """T·∫°o ·∫£nh l∆∞·ªõi t·ª´ danh s√°ch c√°c cells (ch·ª©a file_bytes v√† caption)."""
    total = len(cells)
    if total == 0:
        return None

    rows = math.ceil(total / cols)
    w = cols * size[0]
    h = rows * (size[1] + caption_height)
    grid = Image.new("RGB", (w, h), bg_color)
    draw = ImageDraw.Draw(grid)

    # Font h·ªó tr·ª£ ti·∫øng Vi·ªát (c·∫ßn ph·∫£i c√≥ tr√™n h·ªá th·ªëng ho·∫∑c m√¥i tr∆∞·ªùng)
    font = None
    for fname in ("NotoSans-Regular.ttf", "DejaVuSans.ttf", "arial.ttf"):
        try:
            font = ImageFont.truetype(fname, 18)
            break
        except Exception:
            font = None
    if font is None:
        font = ImageFont.load_default()

    for i, cell in enumerate(cells):
        r, c = divmod(i, cols)
        x = c * size[0]
        y = r * (size[1] + caption_height)

        fb = cell.get("file_bytes")
        desc = (cell.get("caption") or "").strip()

        # D√°n ·∫£nh
        if fb:
            try:
                img = Image.open(io.BytesIO(fb)).convert("RGB")
                img = img.resize(size)
                grid.paste(img, (x, y))
            except Exception:
                # B·ªè qua ·∫£nh l·ªói
                pass

        # Ghi m√¥ t·∫£
        if desc:
            lines = textwrap.wrap(desc, width=25)
            lines = lines[:2] # Gi·ªõi h·∫°n 2 d√≤ng
            for li, line in enumerate(lines):
                tw, th = measure_text(draw, line, font)
                tx = x + (size[0] - tw) // 2 # Canh gi·ªØa
                ty = y + size[1] + li * (th + 4) + 6
                draw.text((tx, ty), line, fill=(0, 0, 0), font=font)

    return grid


# --- 2. C√°c h√†m x·ª≠ l√Ω Session State ---

def update_preview():
    """ƒê·∫∑t c·ªù ƒë·ªÉ k√≠ch ho·∫°t render l·∫°i ph·∫ßn Preview."""
    st.session_state['show_preview'] = True

def handle_grid_generation():
    """X·ª≠ l√Ω t·∫°o ·∫£nh gh√©p, chuy·ªÉn th√†nh Base64 v√† c·∫≠p nh·∫≠t HTML."""
    cells = st.session_state.get('current_cells_data', [])
    # L·∫•y gi√° tr·ªã c·ªôt tr·ª±c ti·∫øp t·ª´ Session State, n∆°i n√≥ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông
    cols = st.session_state.get('cols_input', 4) 
    
    if not cells:
        st.warning("Vui l√≤ng t·∫£i l√™n ·∫£nh v√† nh·∫≠p m√¥ t·∫£ ƒë·ªÉ t·∫°o ·∫£nh gh√©p.")
        st.session_state['base64_image_html'] = ""
        return

    try:
        # 1. T·∫°o ·∫£nh gh√©p (Grid Image)
        grid_img = make_grid_with_captions(
            cells,
            cols=cols,
            size=(300, 300),
            caption_height=70
        )
        
        if grid_img is None:
            st.error("Kh√¥ng th·ªÉ t·∫°o ·∫£nh gh√©p.")
            return

        # 2. Chuy·ªÉn ·∫£nh gh√©p th√†nh Base64 (ƒë·ªãnh d·∫°ng PNG)
        buf = io.BytesIO()
        grid_img.save(buf, format="PNG")
        bytes_data = buf.getvalue()

        base64_encoded_data = base64.b64encode(bytes_data).decode('utf-8')
        mime_type = "image/png"
        
        # 3. T·∫°o th·∫ª <img> s·ª≠ d·ª•ng Base64 Data URI
        image_html = f"""
        <div style="margin-top: 30px; padding-top: 15px; border-top: 3px solid #8E44AD; padding: 20px; border-radius: 8px;">
            <h3 style="color: #8E44AD;">·∫¢nh Gh√©p L∆∞·ªõi ƒê√£ T·∫°o:</h3>
            <p>T·ªïng s·ªë ·∫£nh: {len(cells)}. B·ªë c·ª•c: {cols} c·ªôt.</p>
            <img src="data:{mime_type};base64,{base64_encoded_data}" alt="Generated Image Grid" 
                 style="max-width: 100%; height: auto; display: block; margin: 15px 0; border: 1px solid #D7DBDD; border-radius: 4px;">
        </div>
        """
        
        # 4. C·∫≠p nh·∫≠t Session State
        st.session_state['base64_image_html'] = image_html
        st.session_state['show_preview'] = True
        st.success(f"üñºÔ∏è ·∫¢nh gh√©p ({len(cells)} ·∫£nh) ƒë√£ ƒë∆∞·ª£c t·∫°o v√† nh√∫ng th√†nh c√¥ng. Nh·∫•n 'Hi·ªÉn th·ªã HTML Preview' ƒë·ªÉ xem.")

    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω t·∫°o ·∫£nh gh√©p: {e}")


# --- 3. H√†m Ch√≠nh c·ªßa ·ª®ng d·ª•ng Streamlit ---
def main():
    st.set_page_config(layout="wide", page_title="HTML Preview & PDF Export")

    st.title("HTML Report Generator & PDF Exporter (Grid Image)")
    
    # --- Kh·ªüi t·∫°o Session State An to√†n ---
    
    default_html = ()
    
    
    # S·ª≠ d·ª•ng setdefault ƒë·ªÉ ƒë·∫£m b·∫£o c√°c kh√≥a lu√¥n t·ªìn t·∫°i, tr√°nh KeyError
    st.session_state.setdefault('html_code', default_html)
    st.session_state.setdefault('base64_image_html', "") # L∆∞u chu·ªói HTML ch·ª©a ·∫£nh Base64
    st.session_state.setdefault('show_preview', True)
    st.session_state.setdefault('current_cells_data', []) # L∆∞u d·ªØ li·ªáu ·∫£nh v√† caption
    st.session_state.setdefault('cols_input', 4) # ƒê√£ fix: Kh√≥a n√†y gi·ªù lu√¥n ƒë∆∞·ª£c kh·ªüi t·∫°o.

    # --- ƒê·ªãnh nghƒ©a Layout 2 c·ªôt ---
    col_input, col_preview = st.columns([1, 1])
    
    # --- C·ªôt 1: Nh·∫≠p M√£ HTML, T·∫£i ·∫¢nh, N√∫t K√≠ch ho·∫°t ---
    with col_input:
        st.subheader("1. D√°n M√£ HTML (N·ªôi dung B√°o C√°o)")
        
        # Text area li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi Session State
        st.session_state['html_code'] = st.text_area(
            "Ch·ªânh s·ª≠a n·ªôi dung HTML ·ªü ƒë√¢y:", 
            st.session_state['html_code'], 
            height=250,
            key="input_html_area"
        )
        
        # N√∫t K√≠ch ho·∫°t Hi·ªÉn th·ªã Preview
        st.button(
            "‚ñ∂ Hi·ªÉn th·ªã HTML Preview", 
            on_click=update_preview, 
            type="primary"
        )
        
        st.markdown("---")
        st.subheader("2. T·∫£i l√™n ·∫¢nh v√† Nh·∫≠p M√¥ t·∫£")
        
        # Uploader cho nhi·ªÅu file
        uploaded_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu ·∫£nh (PNG/JPG):",
            type=["png", "jpg", "jpeg"],
            accept_multiple_files=True,
            key="grid_uploaded_files"
        )
        
        cells = []
        if uploaded_files:
            # Nh·∫≠p s·ªë c·ªôt
            # ƒê√£ fix: 'cols_input' ƒë√£ ƒë∆∞·ª£c ƒë·∫£m b·∫£o t·ªìn t·∫°i, n√™n vi·ªác truy c·∫≠p l√† an to√†n.
            cols_input = st.number_input(
                "S·ªë c·ªôt trong l∆∞·ªõi", 
                min_value=1, 
                max_value=10, 
                value=st.session_state['cols_input'], 
                key="cols_input"
            )

            st.markdown("### ‚úçÔ∏è Nh·∫≠p m√¥ t·∫£ cho t·ª´ng ·∫£nh")
            for i, file in enumerate(uploaded_files):
                fb = file.getvalue()
                col1_img, col2_cap = st.columns([1, 5])
                with col1_img:
                    try:
                        # Preview nh·ªè 100x100
                        img_preview = Image.open(io.BytesIO(fb)).convert("RGB")
                        img_preview = img_preview.resize((100, 100))
                        st.image(img_preview)
                    except Exception:
                        st.write("‚ùå Kh√¥ng xem ƒë∆∞·ª£c")
                with col2_cap:
                    caption = st.text_input(f"M√¥ t·∫£ cho ·∫£nh {i+1} ({file.name})", key=f"grid_cap_{i}")
                cells.append({"file_bytes": fb, "caption": caption})
            
            # L∆∞u d·ªØ li·ªáu cells v√†o Session State ƒë·ªÉ h√†m callback truy c·∫≠p
            st.session_state['current_cells_data'] = cells
        else:
             st.session_state['current_cells_data'] = []
             st.session_state['base64_image_html'] = "" # X√≥a ·∫£nh c≈© khi kh√¥ng c√≥ ·∫£nh m·ªõi

        # N√∫t C·∫≠p nh·∫≠t H√¨nh ·∫£nh (k√≠ch ho·∫°t t·∫°o ·∫£nh gh√©p)
        st.button(
            "üñºÔ∏è T·∫£i l√™n & T·∫°o ·∫¢nh Gh√©p", 
            on_click=handle_grid_generation
        )
    
    # --- C·ªôt 2: HTML Preview & N√∫t Xu·∫•t PDF ---
    with col_preview:
        st.subheader("3. HTML Preview & Xu·∫•t PDF")

        # G·ªôp HTML c·ªßa ng∆∞·ªùi d√πng v√† HTML h√¨nh ·∫£nh Base64 ƒë√£ t·∫°o
        final_html_content = st.session_state["html_code"] + st.session_state["base64_image_html"]
        
        # 4. T·∫°o N√∫t Xu·∫•t PDF trong c√πng kh·ªëi HTML
        pdf_button_html = f"""
        <div id="print-button-container" style="width: 100%; margin-top: 20px;">
            <button onclick="printPreview()" 
                    style="background-color: #D35400; color: white; border: none; 
                           padding: 12px 24px; text-align: center; text-decoration: none; 
                           display: inline-block; font-size: 18px; margin: 4px 0; 
                           cursor: pointer; border-radius: 8px; width: 100%;">
                ‚¨á Xu·∫•t File PDF Ch√≠nh X√°c (C·ª≠a S·ªï M·ªõi)
            </button>
            <p style="font-size: 12px; color: gray;">‚ö†Ô∏è C·ª≠a s·ªï m·ªõi s·∫Ω m·ªü ra. Ch·ªçn **'L∆∞u d∆∞·ªõi d·∫°ng PDF'** trong h·ªôp tho·∫°i In tr√™n c·ª≠a s·ªï ƒë√≥.</p>
        </div>
        """

        # 5. G·ªôp HTML code c·ªßa ng∆∞·ªùi d√πng, Script v√† N√∫t b·∫•m v√†o m·ªôt kh·ªëi duy nh·∫•t
        if st.session_state.get('show_preview', False):
            
            # Wrapper ID gi√∫p JS t√¨m th·∫•y to√†n b·ªô n·ªôi dung c·∫ßn copy
            full_html_to_embed = f"""
            {JS_PRINT_FUNCTION}
            <div id="{PREVIEW_ELEMENT_ID}" style="height: 400px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; background-color: white;">
                {final_html_content}
            </div>
            {pdf_button_html}
            """
            
            # Nh√∫ng to√†n b·ªô kh·ªëi n√†y v√†o Streamlit
            components.html(full_html_to_embed, height=550, scrolling=False)
        else:
            st.info("Nh·∫•n n√∫t **'Hi·ªÉn th·ªã HTML Preview'** ·ªü c·ªôt b√™n tr√°i ƒë·ªÉ xem k·∫øt qu·∫£.")


if __name__ == "__main__":
    main()




